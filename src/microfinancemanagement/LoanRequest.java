/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package microfinancemanagement;

import java.awt.Image;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.Period;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;


public class LoanRequest extends javax.swing.JFrame {

    public Connection connection;
    int x=0;
    public String Borrowername;
    public String Lendername;
    int Memberid;
    String MEM_ID;
    int total_day;
    int sub_year, sub_month, sub_day;
    float Total;
    float applyBalance;
    String startingDate, endingDate;
    String type="";
    boolean calculate1=false;
    String Admin;
    String OldLoan="";
    boolean Today_Loan=false;
     String Check_date_Today;
    
    public LoanRequest() {
        initComponents();
    }
 
   public void setAdminName(String Admin)
   {
        this.Admin=Admin;
   }
    public void Member(int id)
    {
      //  this.Member=Member;
        this.Memberid=id;
        MEM_ID=String.valueOf(id);
       // MemberidLabel.setText("Member Id: "+Memberid);
        
        
          try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            connection = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=MicroFinanceManagement;selectMethod=cursor", "sa", "123456");


            Statement statement = connection.createStatement();
            String sql="SELECT * FROM AdmissionForm WHERE MemberId="+Memberid;
            //System.out.println(sql);
            ResultSet resultSet = statement
                    .executeQuery(sql);
            
          //  String sql="SELECT * FROM AdmissionForm WHERE MemberId=?";
            
           
            while (resultSet.next()) {
                
          
                
                MemberId.setText(resultSet.getString("MemberId"));
                MemberName.setText(resultSet.getString("MemberName"));
                PresentAddress.setText(resultSet.getString("Presentaddress"));
                mobilenumber.setText(resultSet.getString("MobileNo"));
                nationalid.setText(resultSet.getString("NationalId"));
               

               InputStream in = resultSet.getBinaryStream("MemberImage");
               Image image = ImageIO.read(in);
               Image newimg = image.getScaledInstance(270, 170,  java.awt.Image.SCALE_SMOOTH);
               ImageIcon icon=new ImageIcon(newimg);

         
                Image.setIcon(icon);
                Image.revalidate();
                Image.revalidate();
                

                  
            }
            connection.close();
            
        } catch (Exception e) {
            e.printStackTrace();
        }
  
       
    }
  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        amount = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        payementcategory = new javax.swing.JComboBox<>();
        payementshare = new javax.swing.JButton();
        save = new javax.swing.JButton();
        calculate = new javax.swing.JButton();
        LoanStatus = new javax.swing.JLabel();
        payday = new javax.swing.JLabel();
        TotalPayement = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        DeadLine = new datechooser.beans.DateChooserCombo();
        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        Image = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        MemberId = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        MemberName = new javax.swing.JTextField();
        PresentAddress = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        mobilenumber = new javax.swing.JTextField();
        nationalid = new javax.swing.JTextField();
        ApplyAmount = new javax.swing.JLabel();
        CountDay = new javax.swing.JLabel();
        applydate = new datechooser.beans.DateChooserCombo();
        Rate = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(153, 0, 153));
        jPanel1.setForeground(new java.awt.Color(0, 255, 255));
        jPanel1.setLayout(null);

        jPanel2.setBackground(new java.awt.Color(0, 51, 153));

        jLabel1.setFont(new java.awt.Font("Tempus Sans ITC", 3, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("APPLY FOR LOAN");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(536, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(383, 383, 383))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel2);
        jPanel2.setBounds(0, 0, 1400, 80);

        jLabel3.setFont(new java.awt.Font("Segoe UI Semilight", 3, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 255, 255));
        jLabel3.setText("DEAD LINE         :");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(730, 530, 180, 40);

        amount.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        amount.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        amount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amountActionPerformed(evt);
            }
        });
        jPanel1.add(amount);
        amount.setBounds(940, 360, 370, 40);

        jLabel9.setFont(new java.awt.Font("Segoe UI Semilight", 3, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 255, 255));
        jLabel9.setText("ENTER AMOUNT :");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(730, 360, 220, 40);

        payementcategory.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        payementcategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DAILLY", "WEEKLY", "MONTHLY" }));
        payementcategory.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        payementcategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payementcategoryActionPerformed(evt);
            }
        });
        jPanel1.add(payementcategory);
        payementcategory.setBounds(940, 420, 370, 40);

        payementshare.setBackground(new java.awt.Color(0, 51, 153));
        payementshare.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        payementshare.setForeground(new java.awt.Color(255, 255, 255));
        payementshare.setIcon(new javax.swing.ImageIcon(getClass().getResource("/microfinancemanagement/share.png"))); // NOI18N
        payementshare.setText("   SHARE");
        payementshare.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        payementshare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payementshareActionPerformed(evt);
            }
        });
        jPanel1.add(payementshare);
        payementshare.setBounds(1140, 600, 170, 60);

        save.setBackground(new java.awt.Color(0, 51, 153));
        save.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        save.setForeground(new java.awt.Color(255, 255, 255));
        save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/microfinancemanagement/save.png"))); // NOI18N
        save.setText("  SAVE");
        save.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        jPanel1.add(save);
        save.setBounds(940, 600, 170, 60);

        calculate.setBackground(new java.awt.Color(0, 51, 153));
        calculate.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        calculate.setForeground(new java.awt.Color(255, 255, 255));
        calculate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/microfinancemanagement/budget.png"))); // NOI18N
        calculate.setText("  CALCULATE");
        calculate.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        calculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateActionPerformed(evt);
            }
        });
        jPanel1.add(calculate);
        calculate.setBounds(730, 600, 180, 60);

        LoanStatus.setFont(new java.awt.Font("Segoe UI Semilight", 1, 26)); // NOI18N
        LoanStatus.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(LoanStatus);
        LoanStatus.setBounds(720, 90, 640, 40);

        payday.setFont(new java.awt.Font("Segoe UI Semilight", 1, 26)); // NOI18N
        payday.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(payday);
        payday.setBounds(720, 240, 610, 40);

        TotalPayement.setFont(new java.awt.Font("Segoe UI Semilight", 1, 26)); // NOI18N
        TotalPayement.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(TotalPayement);
        TotalPayement.setBounds(720, 200, 640, 30);

        jLabel13.setFont(new java.awt.Font("Segoe UI Semilight", 3, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 255, 255));
        jLabel13.setText("PAYEMENT         :");
        jPanel1.add(jLabel13);
        jLabel13.setBounds(730, 420, 200, 40);

        jLabel14.setFont(new java.awt.Font("Segoe UI Semilight", 3, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 255, 255));
        jLabel14.setText("APPLY DATE       :");
        jPanel1.add(jLabel14);
        jLabel14.setBounds(730, 480, 190, 30);

        DeadLine.setCurrentView(new datechooser.view.appearance.AppearancesList("custom",
            new datechooser.view.appearance.ViewAppearance("custom",
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    true,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 255),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(128, 128, 128),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.LabelPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.LabelPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(255, 0, 0),
                    false,
                    false,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                (datechooser.view.BackRenderer)null,
                false,
                true)));
    DeadLine.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED,
        (java.awt.Color)null,
        (java.awt.Color)null,
        (java.awt.Color)null,
        (java.awt.Color)null));
DeadLine.setCalendarPreferredSize(new java.awt.Dimension(400, 350));
DeadLine.setFieldFont(new java.awt.Font("Tahoma", java.awt.Font.BOLD, 18));
jPanel1.add(DeadLine);
DeadLine.setBounds(940, 530, 370, 40);

jPanel4.setBackground(new java.awt.Color(102, 204, 255));
jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
jPanel4.setLayout(null);

jPanel3.setLayout(null);

Image.setBackground(new java.awt.Color(102, 102, 255));
Image.setText("                                 IMAGE");
Image.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
jPanel3.add(Image);
Image.setBounds(0, 0, 270, 170);

jPanel4.add(jPanel3);
jPanel3.setBounds(280, 30, 270, 170);

jLabel8.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
jLabel8.setForeground(new java.awt.Color(102, 0, 102));
jLabel8.setText("MEMBER ID             :");
jPanel4.add(jLabel8);
jLabel8.setBounds(40, 240, 200, 40);

MemberId.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
MemberId.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
jPanel4.add(MemberId);
MemberId.setBounds(260, 240, 310, 40);

jLabel4.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
jLabel4.setForeground(new java.awt.Color(102, 0, 102));
jLabel4.setText("MEMBER NAME      :");
jPanel4.add(jLabel4);
jLabel4.setBounds(40, 310, 190, 40);

jLabel5.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
jLabel5.setForeground(new java.awt.Color(102, 0, 102));
jLabel5.setText("PRESENT ADDRESS :");
jPanel4.add(jLabel5);
jLabel5.setBounds(40, 380, 200, 40);

MemberName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
MemberName.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
jPanel4.add(MemberName);
MemberName.setBounds(260, 310, 310, 40);

PresentAddress.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
PresentAddress.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
jPanel4.add(PresentAddress);
PresentAddress.setBounds(260, 380, 310, 40);

jLabel6.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
jLabel6.setForeground(new java.awt.Color(102, 0, 102));
jLabel6.setText("MOBILE NUMBER   :");
jPanel4.add(jLabel6);
jLabel6.setBounds(40, 450, 180, 40);

jLabel2.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
jLabel2.setForeground(new java.awt.Color(102, 0, 102));
jLabel2.setText("NATIONAL ID        :");
jPanel4.add(jLabel2);
jLabel2.setBounds(40, 520, 180, 40);

mobilenumber.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
mobilenumber.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
jPanel4.add(mobilenumber);
mobilenumber.setBounds(260, 450, 310, 40);

nationalid.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
nationalid.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
jPanel4.add(nationalid);
nationalid.setBounds(260, 520, 310, 40);

jPanel1.add(jPanel4);
jPanel4.setBounds(0, 80, 620, 650);

ApplyAmount.setFont(new java.awt.Font("Segoe UI Semilight", 1, 26)); // NOI18N
ApplyAmount.setForeground(new java.awt.Color(255, 255, 255));
jPanel1.add(ApplyAmount);
ApplyAmount.setBounds(720, 140, 650, 40);

CountDay.setFont(new java.awt.Font("Segoe UI Semilight", 1, 26)); // NOI18N
CountDay.setForeground(new java.awt.Color(255, 255, 255));
jPanel1.add(CountDay);
CountDay.setBounds(1040, 290, 290, 40);

applydate.setCurrentView(new datechooser.view.appearance.AppearancesList("custom",
    new datechooser.view.appearance.ViewAppearance("custom",
        new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
            new java.awt.Color(0, 0, 0),
            new java.awt.Color(0, 0, 255),
            false,
            true,
            new datechooser.view.appearance.swing.ButtonPainter()),
        new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
            new java.awt.Color(0, 0, 0),
            new java.awt.Color(0, 0, 255),
            true,
            true,
            new datechooser.view.appearance.swing.ButtonPainter()),
        new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
            new java.awt.Color(0, 0, 255),
            new java.awt.Color(0, 0, 255),
            false,
            true,
            new datechooser.view.appearance.swing.ButtonPainter()),
        new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
            new java.awt.Color(128, 128, 128),
            new java.awt.Color(0, 0, 255),
            false,
            true,
            new datechooser.view.appearance.swing.LabelPainter()),
        new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
            new java.awt.Color(0, 0, 0),
            new java.awt.Color(0, 0, 255),
            false,
            true,
            new datechooser.view.appearance.swing.LabelPainter()),
        new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
            new java.awt.Color(0, 0, 0),
            new java.awt.Color(255, 0, 0),
            false,
            false,
            new datechooser.view.appearance.swing.ButtonPainter()),
        (datechooser.view.BackRenderer)null,
        false,
        true)));
applydate.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED,
(java.awt.Color)null,
(java.awt.Color)null,
(java.awt.Color)null,
(java.awt.Color)null));
applydate.setCalendarPreferredSize(new java.awt.Dimension(400, 350));
applydate.setFieldFont(new java.awt.Font("Tahoma", java.awt.Font.BOLD, 18));
jPanel1.add(applydate);
applydate.setBounds(940, 480, 370, 40);

Rate.setFont(new java.awt.Font("Segoe UI Semilight", 1, 26)); // NOI18N
Rate.setForeground(new java.awt.Color(255, 255, 255));
jPanel1.add(Rate);
Rate.setBounds(720, 290, 290, 40);

getContentPane().add(jPanel1);
jPanel1.setBounds(0, -10, 1390, 730);

setSize(new java.awt.Dimension(1403, 769));
setLocationRelativeTo(null);
}// </editor-fold>//GEN-END:initComponents

    private void payementcategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payementcategoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_payementcategoryActionPerformed

    private void amountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_amountActionPerformed

    private void payementshareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payementshareActionPerformed
        // TODO add your handling code here:
        // Borrowername = JOptionPane.showInputDialog("PLEASE ENTER BORROWER ID ");
        //  MemberIDExist(Borrowername);
        
        Lendername = JOptionPane.showInputDialog("PLEASE ENTER LENDER ID ");
        MemberIDExist(Lendername);
        dispose();
        
       // PayeMentShare obj=new PayeMentShare();
      //  obj.setVisible(true);
        
    }//GEN-LAST:event_payementshareActionPerformed

    private void calculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateActionPerformed
        // TODO add your handling code here:
        IS_TODAY_LOAN();
        
        AlreadyGotLoan();
        
       // IS_TODAY_LOAN();
        
        if(OldLoan.equals("UNCLEAR"))
        {
            JOptionPane.showMessageDialog(null, "ALREADY HAVE A LOAN ");
        }
        
        else
        {
         
            
        if(Today_Loan==true)
         {
            JOptionPane.showMessageDialog(null, "ALREADY GOT LOAN TODAY");
         }
        
        else
        {
           
        String applyDate=applydate.getText().toString();
        String deadDate=DeadLine.getText().toString();
        
      //  Profit_Through_Date(applyDate,deadDate);
        
         if(amount.getText().isEmpty())
         {
            JOptionPane.showMessageDialog(null, "PLEASE ENTER AMOUNT ");
         }
         
         
         else
         {
             
         
         String amount1=amount.getText().toString();
         float LoanAmount=Float.parseFloat(amount1);
       
    
           try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
             connection = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=MicroFinanceManagement;selectMethod=cursor", "sa", "123456");


            Statement statement = connection.createStatement();
            ResultSet resultSet = statement
                    .executeQuery("SELECT Total_Amount FROM DEPOSIT_TOTAL WHERE MemberId="+Memberid);
            
            /////////////////////
         //   System.out.println(MemberId);
            
            float total=0;
            while (resultSet.next()) {
                
               // Float amnt=resultSet.getFloat("Amount");
               // total =total+amnt;
                total=resultSet.getFloat("Total_Amount");
                
            }
          
            if(total>=LoanAmount)
            {
                calculate1=true;
                LoanStatus.setText("LOAN REQUEST ACCEPTED");
                ApplyAmount.setText("APPLY AMOUNT : "+LoanAmount+" BDT");
                InterestRate();
            }
            else
            {
                calculate1=false;
                LoanStatus.setText("INSUFFICIENT DEPOSIT");
                ApplyAmount.setText("");
                TotalPayement.setText("");
                CountDay.setText("");
                payday.setText("");
            }
            
           connection.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e);
        }
     }
         
   }
   /* else
       {
           JOptionPane.showMessageDialog(null, "LOAN CANT TAKE IN A SAMEE DAY");
       } */
 }
    }//GEN-LAST:event_calculateActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
        
        
        if(calculate1==false)
        {
            JOptionPane.showMessageDialog(null, "PLEASE SELECT AMOUNT AND CALCULATION PROCESS");
        }
        else
        {
            
        
         try
        {
            
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url="jdbc:sqlserver://localhost:1433;databaseName=MicroFinanceManagement;user=sa;password=123456";
            Connection con = DriverManager.getConnection(url);
             

            String sql = "Insert into LOAN"
                    +"(MemberId, ApplyAmount, HaveToPay, Deadline, ApplyDate, LoanType, EntryBy)"
                    +"values(?, ?, ?, ?, ?, ?, ?)";
            
            
           // INSTALLMENT1_MemberID_ApplyDate();
            
        /*    String sql2="INSERT INTO INSTALLMENT1"
                        +"(MemberId, MemberId_ApplyDate,Status)"
                        +"values(?, ? ,?)";
            
          /*   String sql3="INSERT INTO INSTALLMENT_TOTAL"
                        +"(MemberId, Total_Amount)"
                        +"values(?, ?)";
            
             */
            PreparedStatement pst = con.prepareStatement(sql);
       //     PreparedStatement pst1 = con.prepareStatement(sql2);
        //    PreparedStatement pst3 = con.prepareStatement(sql3);
            
            pst.setInt(1, Memberid);
            pst.setFloat(2, applyBalance);
            pst.setFloat(3, Total);
            pst.setString(4, endingDate);
            pst.setString(5, startingDate);
            pst.setString(6, type);
            pst.setString(7, Admin);
           
            String m_s=Memberid+startingDate;
        //    System.out.println(m_s+" LOAN REQ MEMBER ID APPLYBDATE ..");
            System.out.println(m_s+"M_s Print Here");
            
            
         //   pst1.setInt(1, Memberid);
        //    pst1.setString(2,  m_s.toString());
         //   pst1.setString(3, "UNCLEAR");
            
       //     pst3.setInt(1, Memberid);
         //   pst3.setFloat(2, 0);
            
            pst.executeUpdate();
         //   pst1.executeUpdate();
        //    pst3.executeUpdate();
        
             
           
             
                con.close();
             //   dispose();
               INSTALLMENT1_MemberID_ApplyDate();
               JOptionPane.showMessageDialog(null, "LOAN COMPLETED SUCCESSFULLY");
                
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        } 
      
        }
    }//GEN-LAST:event_saveActionPerformed

    public void  INSTALLMENT1_MemberID_ApplyDate()
    {
        //GET APPLY DATE
        
        
          String aplyDATE="";
          
           try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
           Connection connection3 = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=MicroFinanceManagement;selectMethod=cursor", "sa", "123456");


            Statement statement = connection3.createStatement();
            String sql="SELECT ApplyDate FROM LOAN WHERE MemberId='"+Memberid+"'";
            //System.out.println(sql);
            ResultSet resultSet = statement
                    .executeQuery(sql);
            
          //  String sql="SELECT * FROM AdmissionForm WHERE MemberId=?";
            
           
            while (resultSet.next()) 
            {
              aplyDATE=resultSet.getString("ApplyDate");
              System.out.println("HIIII..."+aplyDATE);
            }
            connection3.close();
            
            }catch(Exception e)
            {
                    
            }
          
          
          
          
          //APPLY DATE
      /*   try {
             
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection connection3 = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=MicroFinanceManagement;selectMethod=cursor", "sa", "123456");


            Statement statement = connection3.createStatement();
         //   String sql="SELECT ApplyDate FROM LOAN WHERE MemberId='"+MEM_ID+"'";
            
            //System.out.println(sql);
            ResultSet resultSet2 = statement
                    .executeQuery("SELECT ApplyDate FROM LOAN WHERE MemberId='"+MEM_ID+"'");
       
            while (resultSet2.next())
            {
                aplyDATE=resultSet2.getString("ApplyDate");
                System.out.println("the beggggggggggggggTAAAAA.."+aplyDATE);
            }
            
          //  System.out.println("the beggggggggggggggTAAAAA.."+aplyDATE);
            connection3.close();
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
  
       */
        
        
        
        /// END APPLY DATE
        
        
        
         try
        {
            
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url="jdbc:sqlserver://localhost:1433;databaseName=MicroFinanceManagement;user=sa;password=123456";
            Connection con = DriverManager.getConnection(url);
            
            String sql2="INSERT INTO INSTALLMENT1"
                        +"(MemberId, MemberId_ApplyDate,Status)"
                        +"values(?, ? ,?)";
       
            PreparedStatement pst1 = con.prepareStatement(sql2);
        
           
            String m_s=Memberid+aplyDATE;
        //    System.out.println(m_s+" LOAN REQ MEMBER ID APPLYBDATE ..");
            System.out.println(m_s+"M_s Print Here");
            
            
            pst1.setInt(1, Memberid);
            pst1.setString(2,  m_s.toString());
            pst1.setString(3, "UNCLEAR");
            
       //     pst3.setInt(1, Memberid);
         //   pst3.setFloat(2, 0);
            pst1.executeUpdate();
        //    pst3.executeUpdate();
        
               JOptionPane.showMessageDialog(null, "LOAN COMPLETED SUCCESSFULLY");
           
             
                con.close();
                dispose();
                
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        } 
      
        
    }
     public void MemberIDExist(String id)
    {
        int id1=Integer.parseInt(id);
        boolean idExist=false;
         try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
             connection = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=MicroFinanceManagement;selectMethod=cursor", "sa", "123456");


            Statement statement = connection.createStatement();
            ResultSet resultSet = statement
                    .executeQuery("SELECT MemberId FROM AdmissionForm WHERE MemberId="+id1);
            
            
            while (resultSet.next()) {
                
               idExist=true;
            }
            if(idExist==true)
            {    
                
                    PayeMentShare obj=new PayeMentShare();
                 //   int Bid=Integer.parseInt(Borrowername);
                    int Lid=Integer.parseInt(Lendername);
                    obj.setMemberID(Lid, Memberid, applydate.getText(), Admin);
                    obj.setVisible(true);
                    
                
                
                 //obj.Member(id1);
                 
                 
            }
            else
            {
                JOptionPane.showMessageDialog(null, "PLEASE ENTER VALID MEMBER ID");
            }
            
           connection.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
}
   public void InterestRate()
   {
       Profit_Through_Date(applydate.getText().toString(), DeadLine.getText().toString());
       int item=payementcategory.getSelectedIndex();
     //  String type="";
       if(item==0)
       {
           type="Dailly";
           
       }
       
        if(item==1)
       {
           type="WEEKLY";
           
       }
        
         if(item==2)
       {
           type="MONTHLY";
           
       }
         
          try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
             connection = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=MicroFinanceManagement;selectMethod=cursor", "sa", "123456");


            Statement statement = connection.createStatement();
            ResultSet resultSet = statement
                    .executeQuery("SELECT * FROM LOANRATE");
            
            float rate=0;
            while (resultSet.next()) {
          
              rate=resultSet.getFloat(type);
            }
            String balance =amount.getText();
            applyBalance=Float.parseFloat(balance);
            
            float temp=(rate*total_day*applyBalance)/12000;
            
          //  System.out.println(temp+"PROFIT");
          //  System.out.println(rate+"PROFIT");
         //   System.out.println(total_day+"PROFIT");
            float count=0;
            float profit=temp+applyBalance;
            
            double tmp2=Math.ceil(profit);
            Double obj=new Double(tmp2);
            Total=obj.floatValue();
            
            double x=0;
             
            // float Intotal=(rate*)
            if(type=="Dailly")
              {
                 
               //  x=Math.floor(profit/total_day); 
                // x=Math.ceil(profit/total_day); 
                 count=total_day;
                 x=profit/total_day;
                // System.out.println(x);
              }
       
            if(type=="WEEKLY")
             {
                 if(total_day<=7)
                 {
                     x=profit;
                     count=1;
                 }
                 else
                 {
                     count=total_day/7;
                   //  x=Math.floor(7*(profit/total_day)); 
                     //System.out.println(x);
                 //   x= Math.ceil(profit/total_day); 
                     x=profit/count;
                    
                 }
              
             }
        
            if(type=="MONTHLY")
             {
                 if(total_day<=30)
                 {
                     count=1;
                     x=profit;
                 }
                 else
                 {
                     count=total_day/30;
                    // x=Math.floor(30*(profit/total_day)); 
                   //  System.out.println(x);
                 //  x=Math.ceil(profit/total_day); 
                 x=profit/count;
                   
                 }
            
             }
            
            Rate.setText("RATE :"+rate+" %");
            TotalPayement.setText("TOTAL PAYEMENT :"+Total+" BDT");
           // CountDay.setText("RATE : "+rate+"%");
            payday.setText("PAYEMENT :"+x+" BDT"+" "+type);
            CountDay.setText("COUNT :"+count);
           connection.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
         
       
   }
   
   public void Profit_Through_Date(String applyDate, String deadDate)
   {
       
    
           // String from=fromDate.getText();
            String month1="";
            String date1="";
            String year1="";
           
            int j=0, k=0;
            
            for(int i=0; i<applyDate.length(); i++)
            {
                char c=applyDate.charAt(i);
                if(c=='/')
                {
                    ++i;
                    j=i;
                    break;
                }
                month1 +=c;
               
            }
            
             for(int i=j; i<applyDate.length(); i++)
            {
                char c=applyDate.charAt(i);
                if(c=='/')
                {
                    ++i;
                    k=i;
                    break;
                }
                date1 +=c;
               
            }
            
             for(int i=k; i<applyDate.length(); i++)
            {
                char c=applyDate.charAt(i);
                if(c=='/')
                {
                    
                    break;
                }
                year1 +=c;
               
            }
             
             
          //    String To=toDate.getText();
            String month2="";
            String date2="";
            String year2="";
           
             j=0;
             k=0;
            
            for(int i=0; i<deadDate.length(); i++)
            {
                char c=deadDate.charAt(i);
                if(c=='/')
                {
                    ++i;
                    j=i;
                    break;
                }
                month2 +=c;
               
            }
            
             for(int i=j; i<deadDate.length(); i++)
            {
                char c=deadDate.charAt(i);
                if(c=='/')
                {
                    ++i;
                    k=i;
                    break;
                }
                date2 +=c;
               
            }
            
             for(int i=k; i<deadDate.length(); i++)
            {
                char c=deadDate.charAt(i);
                if(c=='/')
                {
                    
                    break;
                }
                year2 +=c;
               
            }
             
             startingDate="20"+year1+"-"+month1+"-"+date1;
             endingDate="20"+year2+"-"+month2+"-"+date2;
             ///TOTAL DAY COUNT
             
          
             int y1=Integer.parseInt(year1);
             int m1=Integer.parseInt(month1);
             int d1=Integer.parseInt(date1);
             int y2=Integer.parseInt(year2);
             int m2=Integer.parseInt(month2);
             int d2=Integer.parseInt(date2);
             
             LocalDate pdate1 = LocalDate.of(y2, m2,d2);
             LocalDate pdate2 = LocalDate.of(y1, m1,d1);
             //LocalDate now = LocalDate.now();
             Period diff = Period.between(pdate2, pdate1);
             
              sub_year=diff.getYears();
              sub_month=diff.getMonths();
              sub_day=diff.getDays();
             
                
            
              
             System.out.println("Diff "+sub_year+" "+sub_month+" "+sub_day);
             
             total_day=((sub_year*365)+(sub_month*30)+(sub_day)+1);
             
             System.out.println("TOTAL DAYS : "+total_day);
            
             System.out.println(startingDate);
             System.out.println(endingDate);
    }
   
   public void AlreadyGotLoan()
   {
        try {
            
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
             connection = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=MicroFinanceManagement;selectMethod=cursor", "sa", "123456");


            Statement statement = connection.createStatement();
            
            ResultSet resultSet = statement
                    .executeQuery("SELECT * FROM INSTALLMENT1 WHERE  MemberId="+Memberid);
            
           // float rate=0;
         //  String MemberId_ApplyDate="";
           String status="";
           String Valid_Loan="";
            while (resultSet.next()) {
          
            //  MemberId_ApplyDate=resultSet.getString("MemberId_ApplyDate");
              status=resultSet.getString("Status");
              Valid_Loan=resultSet.getString("MemberId_ApplyDate");
              
            }
            
          // IS_TODAY_LOAN();
         //  System.out.println("-----------"+Memberid+Check_date_Today);
           if(Valid_Loan.equals(Memberid+Check_date_Today))
           {    
               Today_Loan=true;
               JOptionPane.showMessageDialog(null, "LOAN CANT TAKE TWICE A DAY");
           }
           
           System.out.println(status+"   found");
           if(status.equals("UNCLEAR"))
            {
                OldLoan="UNCLEAR";
            }
            else
            {
                 OldLoan="CLEAR";
            } 
           connection.close();
           
        } catch (Exception e) {
            e.printStackTrace();
        }

           
       
   }
   
   
   public void IS_TODAY_LOAN()
   {
            String from1=applydate.getText();
            String month1="";
            String date1="";
            String year1="";
           
            int j=0, k=0;
            
            for(int i=0; i<from1.length(); i++)
            {
                char c=from1.charAt(i);
                if(c=='/')
                {
                    ++i;
                    j=i;
                    break;
                }
                month1 +=c;
               
            }
            
             for(int i=j; i<from1.length(); i++)
            {
                char c=from1.charAt(i);
                if(c=='/')
                {
                    ++i;
                    k=i;
                    break;
                }
                date1 +=c;
               
            }
            
             for(int i=k; i<from1.length(); i++)
            {
                char c=from1.charAt(i);
                if(c=='/')
                {
                    
                    break;
                }
                year1 +=c;
               
            }
             
             
        
        
          //   LocalDate pdate1 = LocalDate.of(y2, m2,d2);
          //   LocalDate pdate2 = LocalDate.of(y1, m1,d1);
             //LocalDate now = LocalDate.now();
         //    Period diff = Period.between(pdate2, pdate1);
             
           //   sub_year=diff.getYears();
           //   sub_month=diff.getMonths();
          //    sub_day=diff.getDays();
               try {
            
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
             connection = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=MicroFinanceManagement;selectMethod=cursor", "sa", "123456");


            Statement statement = connection.createStatement();
            
            ResultSet resultSet = statement
                    .executeQuery("SELECT * FROM INSTALLMENT1 WHERE  MemberId="+Memberid);
            
           // float rate=0;
         //  String MemberId_ApplyDate="";
           String status="";
           String Valid_Loan="";
            while (resultSet.next()) {
          
            //  MemberId_ApplyDate=resultSet.getString("MemberId_ApplyDate");
              status=resultSet.getString("Status");
              Valid_Loan=resultSet.getString("MemberId_ApplyDate");
              
            }
            
            Check_date_Today=year1+"-"+month1+"-"+date1;
            String ys="20";
              
            String dt1=Memberid+ys+Check_date_Today;
           //   System.out.println("AAAAAAA  "+dt1);
           // System.out.println(year1);
               System.out.println(Memberid);
          
            
            if(Valid_Loan.equals(dt1))
            {
                OldLoan="UNCLEAR";
                Today_Loan=true;
                
              //  JOptionPane.showMessageDialog(null, "DATE NOT VALID TODAY");
            }
            
            
       }catch(Exception e)
       {
           
       }
   }
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoanRequest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoanRequest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoanRequest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoanRequest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoanRequest().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ApplyAmount;
    private javax.swing.JLabel CountDay;
    private datechooser.beans.DateChooserCombo DeadLine;
    private javax.swing.JLabel Image;
    private javax.swing.JLabel LoanStatus;
    private javax.swing.JTextField MemberId;
    private javax.swing.JTextField MemberName;
    private javax.swing.JTextField PresentAddress;
    private javax.swing.JLabel Rate;
    private javax.swing.JLabel TotalPayement;
    private javax.swing.JTextField amount;
    private datechooser.beans.DateChooserCombo applydate;
    private javax.swing.JButton calculate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTextField mobilenumber;
    private javax.swing.JTextField nationalid;
    private javax.swing.JLabel payday;
    private javax.swing.JComboBox<String> payementcategory;
    private javax.swing.JButton payementshare;
    private javax.swing.JButton save;
    // End of variables declaration//GEN-END:variables
}
